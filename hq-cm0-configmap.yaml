apiVersion: v1
data:
  app.py: "from flask import Flask, jsonify, request, render_template\nfrom datetime import datetime\nimport requests\nimport psycopg2\nimport time\nfrom flask_cors import CORS \n\napp = Flask(__name__)\nCORS(app)\n\n# Elasticsearch\nELASTICSEARCH_URL = 'http://elasticsearch:9200'\nKIBANA_URL = \"http://localhost:5601/app/dashboards#/view/cbc70cdf-a9fe-4ecd-87fc-2d95b208c5eb?_g=(refreshInterval:(pause:!t,value:60000),time:(from:'2023-12-01T12:00:00.000Z',to:'2023-12-01T12:02:00.000Z'))&_a=()\"\n\nprint(\"✅ hq is running and db is up\")\n\n# Database connection\ndef db_connection():\n    return psycopg2.connect(\n    dbname=\"hq_db\",\n    user=\"hq_user\",\n    password=\"hq_pass\",\n    host=\"hq-db\",\n    port=5432\n)\n# Enable auto-reload in development mode\napp.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n\n@app.after_request\ndef add_header(response):\n    response.headers[\"Cache-Control\"] = \"no-store, no-cache, must-revalidate, max-age=0\"\n    response.headers[\"Pragma\"] = \"no-cache\"\n    response.headers[\"Expires\"] = \"0\"\n    return response\n\n# updating data to db\n@app.route('/update', methods=['POST'])\ndef update_data():\n    data = request.json\n    index = data.get(\"index\", \"hq-index\")\n\n    # ✅ Set last_updated only once\n    data[\"last_updated\"] = datetime.utcnow().isoformat() + \"Z\"\n\n    conn = None  # Ensure conn is accessible in `finally`\n    \n    try:\n        print(f\"\U0001F4E5 Received data: {data}\")\n\n        # ✅ Step 1: Store in HQ PostgreSQL\n        conn = db_connection()\n        cur = conn.cursor()\n        print(\"✅ Connected to HQ Database\")\n\n        cur.execute(\"\"\"\n            INSERT INTO trucks (truck_id, status, location, event, last_updated)\n            VALUES (%s, %s, %s, %s, %s)\n        \"\"\", (data.get(\"truck_id\"), data.get(\"status\"), data.get(\"location\"), data.get(\"event\"), data.get(\"last_updated\")))\n\n        conn.commit()\n        print(f\"✅ Truck data saved to HQ DB: {data['truck_id']} at {data['last_updated']}\")\n\n        # ✅ Step 2: Send data to Elasticsearch\n        es_response = requests.post(f\"{ELASTICSEARCH_URL}/trucks/_doc\", json=data)\n\n        if es_response.status_code == 201:\n            print(\"✅ Data successfully sent to Elasticsearch!\")\n        else:\n            print(f\"❌ Failed to sync with Elasticsearch: {es_response.text}\")\n\n        return jsonify({\"message\": \"Data stored in HQ DB & Elasticsearch\"}), 201\n\n    except Exception as e:\n        print(f\"❌ Database insert error: {str(e)}\")\n        return jsonify({\"error\": \"Database or Elasticsearch error\"}), 500\n\n    finally:\n        if conn:\n            conn.close()\n            print(\"\U0001F50C Database connection closed.\")\n\n# Fetch truck data from PostgreSQL\ndef fetch_truck_data():\n    try:\n        # Create a new connection for each request\n        conn = psycopg2.connect(\n            dbname=\"hq_db\",\n            user=\"hq_user\",\n            password=\"hq_pass\",\n            host=\"hq-db\",\n            port=5432\n        )\n        with conn.cursor() as cur:\n            cur.execute(\"SELECT truck_id, status, location, event, last_updated FROM trucks;\")\n            rows = cur.fetchall()\n            truck_data = [\n                {\n                    \"truck_id\": row[0],\n                    \"status\": row[1],\n                    \"location\": row[2],\n                    \"event\": row[3],\n                    \"last_updated\": row[4].isoformat()\n                }\n                for row in rows\n            ]\n        print(f\"grabbed truck data {rows}\")\n        return truck_data\n    except Exception as e:\n        print(f\"Database error ⚙️❌: {e}\")\n        return []\n    finally:\n        conn.close()\n\n# API to push truck data to Elasticsearch\n@app.route(\"/push_to_elastic\", methods=[\"POST\"])\ndef push_to_elasticsearch():\n    truck_data = fetch_truck_data()\n    \n    for truck in truck_data:\n        response = requests.post(\n            f\"{ELASTICSEARCH_URL}/trucks/_doc\",\n            json=truck\n        )\n    \n    return jsonify({\"message\": \"Truck data updated to Elasticsearch!\", \"data\": truck_data})\n\n# dashboard\n@app.route('/dashboard')\ndef dashboard():\n    return render_template('dashboard.html', kibana_url=KIBANA_URL)\n\n\n# @app.route('/get-events', methods=['GET'])\n# def get_events():\n#     try:\n#         response = requests.get(HQ_URL, timeout=2)\n#         if response.status_code == 200:\n#             return jsonify(response.json())\n#     except requests.exceptions.RequestException:\n#         print(\"HQ is down, switching to Cloud...\")\n\n#     # Fallback to Cloud\n#     try:\n#         response = requests.get(CLOUD_URL, timeout=2)\n#         if response.status_code == 200:\n#             return jsonify(response.json())\n#     except requests.exceptions.RequestException:\n#         print(\"Both HQ and Cloud are unavailable.\")\n\n#     return jsonify({\"error\": \"No data available\"}), 500\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: hq
  name: hq-cm0
