apiVersion: v1
data:
  app.py: "from flask import Flask, jsonify, request, render_template\nfrom flask_cors import CORS\nimport requests\nimport psycopg2\nfrom datetime import datetime\n\napp = Flask(__name__)\nCORS(app)  # ✅ Enable CORS\n\n# Elasticsearch\nELASTICSEARCH_URL = 'http://elasticsearch:9200'\n\n# Cloud Database Connection\ndef db_connection():\n    return psycopg2.connect(\n        dbname=\"cloud_db\",\n        user=\"cloud_user\",\n        password=\"cloud_pass\",\n        host=\"cloud-db\",\n        port=5432\n    )\n\n@app.route(\"/\")\ndef home():\n    return \"✅ Cloud Server is active & handling updates. Go to /dashboard to view.\"\n\n# ✅ Updating Data to Cloud DB\n@app.route('/update', methods=['POST'])\ndef update_data():\n    data = request.json\n    index = \"trucks\"\n    data[\"last_updated\"] = datetime.utcnow().isoformat() + \"Z\"\n\n    response = requests.post(f\"{ELASTICSEARCH_URL}/{index}/_doc\", json=data)\n\n    conn = None\n    try:\n        print(f\"\U0001F4E5 Receiving data {data}\")\n        conn = db_connection()\n        cur = conn.cursor()\n        print(\"✅ Connected to Cloud Database\")\n        \n        cur.execute(\"\"\"\n                    INSERT INTO trucks (truck_id, status, location, event, last_updated)\n                    VALUES (%s, %s, %s, %s, %s)\n        \"\"\", (data.get(\"truck_id\"), data.get(\"status\"), data.get(\"location\"), data.get(\"event\"), data.get(\"last_updated\")))\n\n        conn.commit()\n        cur.close()\n        conn.close()\n        \n        print(f\"✅ Truck data saved to Cloud DB: {data['truck_id']} at {data['last_updated']}\")\n        return jsonify(response.json())\n\n    except Exception as e:\n        print(f\"Database insert error: {e}\")\n        return jsonify({\"error\": str(e)}), 500\n\n# ✅ Retrieving Truck Events from Cloud DB\n@app.route(\"/truck-events\", methods=[\"GET\"])\ndef get_truck_events():\n    try:\n        conn = db_connection()\n        cur = conn.cursor()\n        cur.execute(\"SELECT truck_id, status, location, event, last_updated FROM trucks ORDER BY last_updated DESC LIMIT 10;\")\n        truck_events = [\n            {\"truck_id\": row[0], \"status\": row[1], \"location\": row[2], \"event\": row[3], \"last_updated\": row[4]}\n            for row in cur.fetchall()\n        ]\n        cur.close()\n        conn.close()\n        \n        return jsonify(truck_events)\n\n    except Exception as e:\n        print(f\"Database query error: {e}\")\n        return jsonify({\"error\": str(e)}), 500\n\n# ✅ Show Cloud Dashboard\n@app.route('/dashboard')\ndef dashboard():\n    return render_template('dashboard.html')\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\n"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: cloud
  name: cloud-cm0
