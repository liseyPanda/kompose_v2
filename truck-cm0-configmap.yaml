apiVersion: v1
data:
  app.py: "import psycopg2\nfrom flask import Flask, jsonify, render_template\nimport requests\nfrom flask_apscheduler import APScheduler\nimport threading\nimport time\n\napp = Flask(__name__)\n\n# Database connection\ndef db_connection():\n    return psycopg2.connect(\n    dbname=\"hq_db\",\n    user=\"hq_user\",\n    password=\"hq_pass\",\n    host=\"hq-db\",\n    port=5432\n)\n\n# HQ URL for truck events\nHQ_URL = \"http://hq:5001/get-truck-events\"\n# Shared Kibana dashboard URL\nKIBANA_URL = \"http://localhost:5601/app/dashboards#/view/a3348423-0e50-4a41-a5d3-1fc38d79af06?_g=(refreshInterval:(pause:!t,value:60000),time:(from:now-15m,to:now))&_a=()\"\nELASTICSEARCH_URL = \"http://elasticsearch:9200\"\n# Enable auto-reload in development mode\napp.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n\n# Auto Sync data\nscheduler = APScheduler()\nlatest_events = []\n\n@app.after_request\ndef add_header(response):\n    response.headers[\"Cache-Control\"] = \"no-store, no-cache, must-revalidate, max-age=0\"\n    response.headers[\"Pragma\"] = \"no-cache\"\n    response.headers[\"Expires\"] = \"0\"\n    return response\n\n@app.route('/')\ndef home():\n    return \"Truck is running. Go to /dashboard to view the dashboard. ✅\"\n\ndef update_truck_route():\n    try:\n        response = requests.get(\"http://localhost:5002/truck-events\")  # Change to correct field server port\n        if response.status_code == 200:\n            data = response.json()\n            global truck_route\n            truck_route = [\n                {\n                    \"lat\": float(location.split(\",\")[0]),\n                    \"lon\": float(location.split(\",\")[1]),\n                    \"location\": entry[\"location\"],\n                    \"status\": entry[\"status\"]\n                }\n                for entry in data\n                for location in [entry[\"location\"]]\n            ]\n            print(f\"✅ Updated Truck Route: {truck_route}\")\n        else:\n            print(\"❌ Failed to fetch truck data\")\n\n    except Exception as e:\n        print(f\"❌ Error fetching truck data: {str(e)}\")\n# chatGPT simulated route for Truck\n# truck_route = [\n#     {\"lat\": 43.5813, \"lon\": -96.7419, \"location\": \"Sioux Falls Regional Airport\"},\n#     {\"lat\": 43.5460, \"lon\": -96.7313, \"location\": \"Downtown Sioux Falls\"},\n#     {\"lat\": 43.5105, \"lon\": -96.7760, \"location\": \"The Empire Mall\"},\n#     {\"lat\": 43.5315, \"lon\": -96.7456, \"location\": \"Sanford USD Medical Center\"},\n#     {\"lat\": 43.4846, \"lon\": -96.7323, \"location\": \"Sioux Falls Truck Stop\"}\n# ]\n\n# current_index = 0  # Track current stop\n\n# # Function to update truck location in Elasticsearch every 10 seconds\n# def update_truck_location():\n#     global current_index\n#     while True:\n#         current_stop = truck_route[current_index]\n#         last_updated = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n#         try:\n#             conn = db_connection()\n#             cur = conn.cursor()\n\n#             # Save data to HQ DB\n#             cur.execute(\"\"\"\n#                 INSERT INTO trucks (truck_id, status, location, event, last_updated)\n#                 VALUES (%s, %s, %s, %s, %s)\n#             \"\"\", (f\"{current_stop['truck_id']}\", \"in transit\", f\"{current_stop['lat']}, {current_stop['lon']}\",\n#                 f\"{current_stop['location']} \", last_updated))\n#             db_connection.commit()\n\n#             print(f\"✅ Truck location saved to HQ DB: {current_stop['location']}\")\n#             # Update Elasticsearch with new location\n#             data = {\n#                 \"truck_id\": f\"{current_stop['truck_id']}\",\n#                 \"status\": \"in transit\",\n#                 \"location\": f\"{current_stop['lat']}, {current_stop['lon']}\",\n#                 \"event\": f\"{current_stop['location']}\",\n#                 \"last_updated\": time.strftime(\"%Y-%m-%d %H:%M:%S\")\n#             }\n#             response = requests.post(f\"{ELASTICSEARCH_URL}/trucks/_doc\", json=data)\n#             if response.status_code == 201:\n#                 print(f\"\U0001F4CD Truck is now at: {current_stop['location']} and updated ES\")\n#             else:\n#                 print(f\"❌ Failed to sync with Elasticsearch: {response.text}\")\n\n#         except Exception as e:\n#             print(f\"❌ Error updating truck location: {str(e)}\")\n\n#         # Move to next stop (loop back to start when reaching end)\n#         current_index = (current_index + 1) % len(truck_route)\n\n#         time.sleep(3)  # Wait 10 seconds before updating again\n\ndef fetch_truck_events():\n    print(\"\U0001F504 Fetching latest truck data from Elasticsearch...\")\n    es_query = {\n        \"query\": {\n           \"wildcard\": { \"truck_id.keyword\": \"Truck-*\"}\n       }\n    }\n    response = requests.get(f\"{ELASTICSEARCH_URL}/trucks/_search\", json=es_query)\n\n    if response.status_code == 200:\n        data = response.json()\n        print(\"✅ Truck events fetched successfully!\")\n        return data  # ✅ Returns data to the scheduler (not the frontend)\n    else:\n        print(\"❌ Failed to fetch truck events:\", response.status_code)\n\n@app.route(\"/truck-events\", methods=[\"GET\"])\ndef get_truck_events():\n   global latest_events\n   es_query = {\n       \"size\": 5,  # Get the latest 5 updates\n       \"sort\": [{\"last_updated\": {\"order\": \"desc\"}}],  # Sort by most recent\n       \"_source\": [\"truck_id\", \"status\", \"location\", \"event\", \"last_updated\"],  # Only get needed fields\n       \"query\": {\n           \"wildcard\": { \"truck_id.keyword\": \"Truck-*\"}\n       }\n   }\n   response = requests.get(f\"{ELASTICSEARCH_URL}/trucks/_search\", json=es_query)\n   if response.status_code == 200:\n        data = response.json()\n        if \"hits\" in data and \"hits\" in data[\"hits\"]:\n            latest_events = [\n                {\n                    \"truck_id\": hit[\"_source\"][\"truck_id\"],\n                    \"status\": hit[\"_source\"][\"status\"],\n                    \"location\": hit[\"_source\"][\"location\"],\n                    \"event\": hit[\"_source\"][\"event\"],\n                    \"last_updated\": hit[\"_source\"][\"last_updated\"]\n                }\n                for hit in data[\"hits\"][\"hits\"]\n            ]\n            print(\"Truck events have been updated \U0001F44D\")\n            return jsonify(latest_events)\n        else: \n            latest_events = []\n            return jsonify({\"error\": \"No truck data found or failed to fetch truck data\"}), 500\n   else:\n        return jsonify({\"error\": \"No truck data found or failed to fetch truck data\"}), 500\n\n# Latest Sync\n\n@scheduler.task(\"interval\", id=\"sync_data\", seconds=3)\ndef sync_data():\n    print(f\"\U0001F6B4‍♀️Syncing your data from ES...\")\n    fetch_truck_events()\n\n# truck dashboard\n@app.route('/dashboard')\ndef dashboard():\n    return render_template('dashboard.html', kibana_url=KIBANA_URL)\n\n# Scheduler\n#scheduler.add_job(id=\"sync_truck_data\", func=get_truck_events, trigger=\"interval\", seconds=30)\nscheduler.init_app(app)\nscheduler.start()\n# Start the location update thread\nthreading.Thread(target=update_truck_route, daemon=True).start()\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\n"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: truck
  name: truck-cm0
