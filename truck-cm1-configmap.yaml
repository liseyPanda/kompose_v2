apiVersion: v1
data:
  dashboard.html: "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Truck Dashboard</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" />\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"></script>\n</head>\n<body>\n    <h1>Truck Dashboard</h1>\n    <table class=\"table table-striped\">\n        <thead class=\"table-dark\">\n            <tr>\n                <th>Truck ID</th>\n                <th>Status</th>\n                <th>Location</th>\n                <th>Event</th>\n                <th>Last Updated</th>\n            </tr>\n        </thead>\n        <tbody id=\"events-table\">\n            <!-- Data will be inserted here dynamically -->\n        </tbody>\n    </table>\n    <!-- <iframe\n        src=\"{{ kibana_url }}\"\n        width=\"100%\"\n        height=\"800px\"\n        frameborder=\"0\"\n        title=\"Kibana Dashboard\"\n    ></iframe> -->\n    <h2>Live Truck Feed</h2>\n    <div id=\"map\" style=\"height: 500px;\"></div>\n\n    <script>\n\n        var map = L.map(\"map\").setView([43.5460, -96.7313], 12);\n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\").addTo(map);\n        var markersLayer = L.layerGroup().addTo(map);\n    \n        // Simulated truck routes\n        var trucks = [\n            { id: \"Truck-1\", name: \"Truck-1\", lat: 43.5813, lon: -96.7419, routeIndex: 0 },\n            { id: \"Truck-2\", name: \"Truck-2\", lat: 43.5460, lon: -96.7313, routeIndex: 0 }\n        ];\n    \n        // Route waypoints (for simulating movement)\n        var truckRoutes = {\n            \"Truck-1\": [\n                { lat: 43.5813, lon: -96.7419, name: \"Sioux Falls Regional Airport\" },\n                { lat: 43.5460, lon: -96.7313, name: \"Downtown Sioux Falls\" },\n                { lat: 43.5105, lon: -96.7760, name: \"The Empire Mall\" },\n                { lat: 43.5315, lon: -96.7456, name: \"Sanford USD Medical Center\" },\n                { lat: 43.4846, lon: -96.7323, name: \"Sioux Falls Truck Stop\" }\n            ],\n            \"Truck-2\": [\n                { lat: 43.6103, lon: -96.7200, name: \"Falls Park\" },\n                { lat: 43.5500, lon: -96.7500, name: \"Denny Sanford PREMIER Center\" },\n                { lat: 43.5000, lon: -96.7800, name: \"Sioux Empire Fairgrounds\" },\n                { lat: 43.4700, lon: -96.7600, name: \"I-29 Truck Rest Stop\" },\n                { lat: 43.4600, lon: -96.7400, name: \"Downtown Sioux Falls Parking Lot\" }\n            ]\n        };\n    \n        var markers = {}; // Store marker references\n        var markersLayer = L.layerGroup().addTo(map);  \n\n        function updateTruckPositions() {\n            trucks.forEach(truck => {\n                let truckRoute = truckRoutes[truck.id];\n                truck.routeIndex = (truck.routeIndex + 1) % truckRoute.length;\n                let nextLocation = truckRoute[truck.routeIndex];\n\n                truck.lat = nextLocation.lat;\n                truck.lon = nextLocation.lon;\n                truck.event = `Moving to ${nextLocation.name}`;\n\n                console.log(`\U0001F69A ${truck.id} moving to: ${nextLocation.name}`);\n\n                // ✅ If marker exists, update its position\n                if (markers[truck.id]) {\n                    markers[truck.id].setLatLng([truck.lat, truck.lon])\n                        .bindPopup(`${truck.name} - ${truck.event}`)\n                        .openPopup();\n                } else {\n                    // ✅ If marker does not exist, create it and store it\n                    markers[truck.id] = L.marker([truck.lat, truck.lon])\n                        .addTo(markersLayer)\n                        .bindPopup(`${truck.name} - ${truck.event}`)\n                        .openPopup();\n                }\n\n                sendTruckUpdateToHQ(truck);\n            });\n        }\n\n    \n        async function sendTruckUpdateToHQ(truck) {\n            let hqUrl = \"http://localhost:5001/update\";  // HQ API\n            let cloudUrl = \"http://localhost:5004/update\";  // Cloud API\n\n            try {\n                console.log(`\U0001F4E4 Sending update for ${truck.id} to HQ: ${truck.event}`);\n                let response = await fetch(hqUrl, {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify({\n                        truck_id: truck.id,\n                        status: \"in transit\",\n                        location: `${truck.lat}, ${truck.lon}`,\n                        event: `${truck.event}`\n                    })\n                });\n\n                if (!response.ok) throw new Error(\"HQ is down! Switching to Cloud.\");\n\n                console.log(\"✅ Update sent to HQ:\", await response.json());\n            } catch (error) {\n                console.warn(\"⚠ HQ is down. Sending update to Cloud...\");\n\n                try {\n                    let cloudResponse = await fetch(cloudUrl, {\n                        method: \"POST\",\n                        headers: { \"Content-Type\": \"application/json\" },\n                        body: JSON.stringify({\n                            truck_id: truck.id,\n                            status: \"in transit\",\n                            location: `${truck.lat}, ${truck.lon}`,\n                            event: `${truck.event}`\n                        })\n                    });\n\n                    console.log(\"✅ Update sent to Cloud:\", await cloudResponse.json());\n                } catch (cloudError) {\n                    console.error(\"❌ Both HQ and Cloud are unreachable!\", cloudError);\n                }\n            }\n        }\n\n    \n        // Update truck positions every 10 seconds\n        setInterval(updateTruckPositions, 10000);\n        //fetch data from db and put it in our UI\n        \n        async function fetchTruckEvents() {\n            try {\n                const response = await fetch(\"/truck-events\"); // Fetch truck data\n                const trucks = await response.json();\n\n                let tableBody = document.getElementById(\"events-table\");\n                tableBody.innerHTML = \"\"; // ✅ Keep history in table\n\n                let latestTruckPositions = {}; // ✅ Store only the latest truck position\n\n                trucks.forEach(truck => {\n                    latestTruckPositions[truck.truck_id] = truck; // ✅ Only keep latest event per truck\n                });\n\n                // ✅ Update table (history remains)\n                trucks.forEach(truck => {\n                    let row = `\n                        <tr>\n                            <td>${truck.truck_id}</td>\n                            <td>${truck.status}</td>\n                            <td>${truck.location}</td>\n                            <td>${truck.event}</td>\n                            <td>${truck.last_updated}</td>\n                        </tr>\n                    `;\n                    tableBody.innerHTML += row;\n                });\n\n                // ✅ Update the map (only latest truck positions)\n                Object.values(latestTruckPositions).forEach(truck => {\n                    let [lat, lon] = truck.location.split(\", \");\n                    lat = parseFloat(lat);\n                    lon = parseFloat(lon);\n\n                    // ✅ If marker exists, update position instead of removing all\n                    if (markers[truck.truck_id]) {\n                        markers[truck.truck_id].setLatLng([lat, lon])\n                            .bindPopup(`${truck.truck_id} - ${truck.status} @ ${truck.event}`)\n                            .openPopup();\n                    } else {\n                        // ✅ If marker doesn't exist, create it\n                        markers[truck.truck_id] = L.marker([lat, lon])\n                            .addTo(markersLayer)\n                            .bindPopup(`${truck.truck_id} - ${truck.status} @ ${truck.event}`)\n                            .openPopup();\n                    }\n                });\n\n            } catch (error) {\n                console.error(\"❌ Error fetching truck events:\", error);\n            }\n        }\n\n        // ✅ Refresh data every 5 seconds\n        setInterval(fetchTruckEvents, 5000);\n        window.onload = fetchTruckEvents;\n\n\n    </script>\n    \n    \n</body>\n</html>\n"
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: truck
  name: truck-cm1
