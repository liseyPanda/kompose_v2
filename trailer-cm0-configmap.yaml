apiVersion: v1
data:
  app.py: "from flask import Flask, jsonify, render_template\nimport requests\nfrom flask_apscheduler import APScheduler\n\napp = Flask(__name__)\n\nHQ_URL = \"http://hq:5001/get-trailer-events\"\n\n# trailer specific kibana dashboard url\nKIBANA_URL = \"http://localhost:5601/app/dashboards#/view/99fc8f59-f28c-4607-b2b5-8edd5c01153f?_g=(refreshInterval:(pause:!t,value:60000),time:(from:now-15m,to:now))&_a=()\"\nELASTICSEARCH_URL = \"http://elasticsearch:9200\"\n# Enable auto-reload in development mode\napp.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n\n# Auto Sync data\nscheduler = APScheduler()\nlatest_events = []\n\n@app.after_request\ndef add_header(response):\n    response.headers[\"Cache-Control\"] = \"no-store, no-cache, must-revalidate, max-age=0\"\n    response.headers[\"Pragma\"] = \"no-cache\"\n    response.headers[\"Expires\"] = \"0\"\n    return response\n\n@app.route('/')\ndef home():\n    return \"✅ Trailer is running. Go to /dashboard to view the trailer Kibana dashboard.\"\n\n# Fetch trailer events from HQ\ndef get_trailer_events():\n    global latest_events\n    elastic_query = {\n        \"query\": {\n            \"wildcard\": { \"truck_id.keyword\": \"Trailer-*\" }\n        }\n    }\n    response = requests.get(f\"{ELASTICSEARCH_URL}/trucks/_search\", json=elastic_query)\n\n    if response.status_code == 200:\n        data = response.json()\n        if \"hits\" in data and \"hits\" in data[\"hits\"]:\n            latest_events = [\n                {\n                    \"truck_id\": hit[\"_source\"][\"truck_id\"],\n                    \"status\": hit[\"_source\"][\"status\"],\n                    \"location\": hit[\"_source\"][\"location\"],\n                    \"event\": hit[\"_source\"][\"event\"],\n                    \"last_updated\": hit[\"_source\"][\"last_updated\"]\n                }\n                for hit in data[\"hits\"][\"hits\"]\n            ]\n            print(\"Trailer events have been updated \U0001F44D\")\n        else: \n            latest_events = []\n\n    else:\n        print(\"Failed to sync trailer data from ES ⛔\")\n\n# trailer events\n@app.route(\"/trailer-events\", methods=[\"GET\"])\ndef get_latest_events():\n    return jsonify(latest_events)\n\n# trailer dashboard\n@app.route('/dashboard')\ndef dashboard():\n    return render_template('dashboard.html', kibana_url=KIBANA_URL)\n\n# schedule\nscheduler.add_job(id=\"sync_trailer_data\", func=get_trailer_events, trigger=\"interval\", seconds=30)\nscheduler.init_app(app)\nscheduler.start()\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\n"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: trailer
  name: trailer-cm0
